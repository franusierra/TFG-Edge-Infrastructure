#!/bin/bash
# Infrastructure setup script
#
# ARG_OPTIONAL_SINGLE([host-ip],[i],[Select the ip of the host with passwordless ssh configured from your machine])
# ARG_OPTIONAL_BOOLEAN([local],[],[Deploy the cluster on localhost (Overrides ip)])
# ARG_OPTIONAL_BOOLEAN([no-monitoring],[],[Disables the kube-metrics monitoring])
# ARG_HELP([Script for inicialization of the infrastructure])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='ih'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_host_ip=
_arg_local="off"
_arg_no_monitoring="off"


print_help()
{
	printf '%s\n' "Script for inicialization of the infrastructure"
	printf 'Usage: %s [-i|--host-ip <arg>] [--(no-)local] [--(no-)no-monitoring] [-h|--help]\n' "$0"
	printf '\t%s\n' "-i, --host-ip: Select the ip of the host with passwordless ssh configured from your machine (no default)"
	printf '\t%s\n' "--local, --no-local: Deploy the cluster on localhost (Overrides ip) (off by default)"
	printf '\t%s\n' "--no-monitoring, --no-no-monitoring: Disables the kube-metrics monitoring (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-i|--host-ip)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_host_ip="$2"
				shift
				;;
			--host-ip=*)
				_arg_host_ip="${_key##--host-ip=}"
				;;
			-i*)
				_arg_host_ip="${_key##-i}"
				;;
			--no-local|--local)
				_arg_local="on"
				test "${1:0:5}" = "--no-" && _arg_local="off"
				;;
			--no-no-monitoring|--no-monitoring)
				_arg_no_monitoring="on"
				test "${1:0:5}" = "--no-" && _arg_no_monitoring="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash



# Check for kubectl installation
if ! command -v "kubectl" &> /dev/null
then
    echo "Error: Kubectl needs to be installed for the installation script"
    echo "You can get info on the installation proccess on: "
    echo "  https://kubernetes.io/es/docs/tasks/tools/install-kubectl/"
    exit 1
fi
# Check for k3sup installation
if ! command -v "k3sup" &> /dev/null
then
    echo "Error: K3sup needs to be installed for the installation script"
    echo "You can get info on the installation proccess on: "
    echo "  https://kubernetes.io/es/docs/tasks/tools/install-kubectl/"
    exit 1
fi

# Local installation
if [ $_arg_local ]
then
  k3sup install --local-path=~/.kube/config --local


  if [ ! $_arg_no-monitoring ]
    echo "Deploying monitoring resources... "
    kubectl apply -f monitoring/
    echo "Waiting for grafana to be ready..."
    kubectl wait --for=condition=available --timeout=600s deployment/prometheus-grafana -n monitoring
    echo "You can now access grafana metrics on localhost/monitoring"
  fi
  kubectl apply -f namespaces/
  kubectl apply -f deployment/

else
  if [$_arg_host-ip]
  then
    echo "Error: Option not yet supported :("
    exit 1
  else
    echo "Error: You need to specify the host-ip"
    exit 1
  fi
fi


# ] <-- needed because of Argbash
